#ifndef INSOMNIA_AST_VISITOR_H
#define INSOMNIA_AST_VISITOR_H

#include "ast_fwd.h"

namespace insomnia::ast {

class Visitor {
public:
  virtual ~Visitor() = default;
  virtual void traverse(const Crate &node);
  virtual void traverse(const Item &node);
  virtual void traverse(const VisItem &node);
  virtual void traverse(const Function &node);
  virtual void traverse(const FunctionParameters &node);
  virtual void traverse(const FunctionParam &node);
  virtual void traverse(const FunctionParamPattern &node);
  virtual void traverse(const SelfParam &node);
  virtual void traverse(const Type &node);
  virtual void traverse(const TypeNoBounds &node);
  virtual void traverse(const ParenthesizedType &node);
  virtual void traverse(const TupleType &node);
  virtual void traverse(const ReferenceType &node);
  virtual void traverse(const ArrayType &node);
  virtual void traverse(const SliceType &node);
  virtual void traverse(const Struct &node);
  virtual void traverse(const StructStruct &node);
  virtual void traverse(const StructFields &node);
  virtual void traverse(const StructField &node);
  virtual void traverse(const Enumeration &node);
  virtual void traverse(const EnumItems &node);
  virtual void traverse(const EnumItem &node);
  virtual void traverse(const EnumItemDiscriminant &node);
  virtual void traverse(const ConstantItem &node);
  virtual void traverse(const Trait &node);
  virtual void traverse(const AssociatedItem &node);
  virtual void traverse(const Implementation &node);
  virtual void traverse(const InherentImpl &node);
  virtual void traverse(const TraitImpl &node);
  virtual void traverse(const TypePath &node);
  virtual void traverse(const TypePathSegment &node);
  virtual void traverse(const PathIdentSegment &node);
  virtual void traverse(const Expression &node);
  virtual void traverse(const ExpressionWithoutBlock &node);
  virtual void traverse(const LiteralExpression &node);
  virtual void traverse(const PathExpression &node);
  virtual void traverse(const PathInExpression &node);
  virtual void traverse(const PathExprSegment &node);
  virtual void traverse(const OperatorExpression &node);
  virtual void traverse(const BorrowExpression &node);
  virtual void traverse(const DereferenceExpression &node);
  virtual void traverse(const NegationExpression &node);
  virtual void traverse(const ArithmeticOrLogicalExpression &node);
  virtual void traverse(const ComparisonExpression &node);
  virtual void traverse(const LazyBooleanExpression &node);
  virtual void traverse(const TypeCastExpression &node);
  virtual void traverse(const AssignmentExpression &node);
  virtual void traverse(const CompoundAssignmentExpression &node);
  virtual void traverse(const GroupedExpression &node);
  virtual void traverse(const ArrayExpression &node);
  virtual void traverse(const ArrayElements &node);
  virtual void traverse(const IndexExpression &node);
  virtual void traverse(const TupleExpression &node);
  virtual void traverse(const TupleElements &node);
  virtual void traverse(const TupleIndexingExpression &node);
  virtual void traverse(const StructExpression &node);
  virtual void traverse(const StructExprFields &node);
  virtual void traverse(const StructExprField &node);
  virtual void traverse(const StructBase &node);
  virtual void traverse(const CallExpression &node);
  virtual void traverse(const CallParams &node);
  virtual void traverse(const MethodCallExpression &node);
  virtual void traverse(const FieldExpression &node);
  virtual void traverse(const ContinueExpression &node);
  virtual void traverse(const BreakExpression &node);
  virtual void traverse(const RangeExpression &node);
  virtual void traverse(const RangeExpr &node);
  virtual void traverse(const RangFromExpr &node);
  virtual void traverse(const RangeToExpr &node);
  virtual void traverse(const RangeFullExpr &node);
  virtual void traverse(const RangeInclusiveExpr &node);
  virtual void traverse(const RangeToInclusiveExpr &node);
  virtual void traverse(const ReturnExpression &node);
  virtual void traverse(const UnderscoreExpression &node);
  virtual void traverse(const ExpressionWithBlock &node);
  virtual void traverse(const BlockExpression &node);
  virtual void traverse(const Statements &node);
  virtual void traverse(const Statement &node);
  virtual void traverse(const LetStatement &node);
  virtual void traverse(const ExpressionStatement &node);
  virtual void traverse(const LoopExpression &node);
  virtual void traverse(const InfiniteLoopExpression &node);
  virtual void traverse(const PredicateLoopExpression &node);
  virtual void traverse(const IfExpression &node);
  virtual void traverse(const Conditions &node);
  virtual void traverse(const MatchExpression &node);
  virtual void traverse(const MatchArms &node);
  virtual void traverse(const MatchArm &node);
  virtual void traverse(const MatchArmGuard &node);
  virtual void traverse(const Pattern &node);
  virtual void traverse(const PatternNoTopAlt &node);
  virtual void traverse(const PatternWithoutRange &node);
  virtual void traverse(const LiteralPattern &node);
  virtual void traverse(const IdentifierPattern &node);
  virtual void traverse(const WildcardPattern &node);
  virtual void traverse(const RestPattern &node);
  virtual void traverse(const ReferencePatter &node);
  virtual void traverse(const StructPattern &node);
  virtual void traverse(const StructPatternElements &node);
  virtual void traverse(const StructPatternEtCetera &node);
  virtual void traverse(const StructPatternFields &node);
  virtual void traverse(const StructPatternField &node);
  virtual void traverse(const TuplePattern &node);
  virtual void traverse(const TuplePatternItems &node);
  virtual void traverse(const GroupedPattern &node);
  virtual void traverse(const SlicePattern &node);
  virtual void traverse(const SlicePatternItems &node);
  virtual void traverse(const PathPattern &node);

  virtual void visit(Crate &node);
  virtual void visit(Item &node);
  virtual void visit(VisItem &node);
  virtual void visit(Function &node);
  virtual void visit(FunctionParameters &node);
  virtual void visit(FunctionParam &node);
  virtual void visit(FunctionParamPattern &node);
  virtual void visit(SelfParam &node);
  virtual void visit(Type &node);
  virtual void visit(TypeNoBounds &node);
  virtual void visit(ParenthesizedType &node);
  virtual void visit(TupleType &node);
  virtual void visit(ReferenceType &node);
  virtual void visit(ArrayType &node);
  virtual void visit(SliceType &node);
  virtual void visit(Struct &node);
  virtual void visit(StructStruct &node);
  virtual void visit(StructFields &node);
  virtual void visit(StructField &node);
  virtual void visit(Enumeration &node);
  virtual void visit(EnumItems &node);
  virtual void visit(EnumItem &node);
  virtual void visit(EnumItemDiscriminant &node);
  virtual void visit(ConstantItem &node);
  virtual void visit(Trait &node);
  virtual void visit(AssociatedItem &node);
  virtual void visit(Implementation &node);
  virtual void visit(InherentImpl &node);
  virtual void visit(TraitImpl &node);
  virtual void visit(TypePath &node);
  virtual void visit(TypePathSegment &node);
  virtual void visit(PathIdentSegment &node);
  virtual void visit(Expression &node);
  virtual void visit(ExpressionWithoutBlock &node);
  virtual void visit(LiteralExpression &node);
  virtual void visit(PathExpression &node);
  virtual void visit(PathInExpression &node);
  virtual void visit(PathExprSegment &node);
  virtual void visit(OperatorExpression &node);
  virtual void visit(BorrowExpression &node);
  virtual void visit(DereferenceExpression &node);
  virtual void visit(NegationExpression &node);
  virtual void visit(ArithmeticOrLogicalExpression &node);
  virtual void visit(ComparisonExpression &node);
  virtual void visit(LazyBooleanExpression &node);
  virtual void visit(TypeCastExpression &node);
  virtual void visit(AssignmentExpression &node);
  virtual void visit(CompoundAssignmentExpression &node);
  virtual void visit(GroupedExpression &node);
  virtual void visit(ArrayExpression &node);
  virtual void visit(ArrayElements &node);
  virtual void visit(IndexExpression &node);
  virtual void visit(TupleExpression &node);
  virtual void visit(TupleElements &node);
  virtual void visit(TupleIndexingExpression &node);
  virtual void visit(StructExpression &node);
  virtual void visit(StructExprFields &node);
  virtual void visit(StructExprField &node);
  virtual void visit(StructBase &node);
  virtual void visit(CallExpression &node);
  virtual void visit(CallParams &node);
  virtual void visit(MethodCallExpression &node);
  virtual void visit(FieldExpression &node);
  virtual void visit(ContinueExpression &node);
  virtual void visit(BreakExpression &node);
  virtual void visit(RangeExpression &node);
  virtual void visit(RangeExpr &node);
  virtual void visit(RangFromExpr &node);
  virtual void visit(RangeToExpr &node);
  virtual void visit(RangeFullExpr &node);
  virtual void visit(RangeInclusiveExpr &node);
  virtual void visit(RangeToInclusiveExpr &node);
  virtual void visit(ReturnExpression &node);
  virtual void visit(UnderscoreExpression &node);
  virtual void visit(ExpressionWithBlock &node);
  virtual void visit(BlockExpression &node);
  virtual void visit(Statements &node);
  virtual void visit(Statement &node);
  virtual void visit(LetStatement &node);
  virtual void visit(ExpressionStatement &node);
  virtual void visit(LoopExpression &node);
  virtual void visit(InfiniteLoopExpression &node);
  virtual void visit(PredicateLoopExpression &node);
  virtual void visit(IfExpression &node);
  virtual void visit(Conditions &node);
  virtual void visit(MatchExpression &node);
  virtual void visit(MatchArms &node);
  virtual void visit(MatchArm &node);
  virtual void visit(MatchArmGuard &node);
  virtual void visit(Pattern &node);
  virtual void visit(PatternNoTopAlt &node);
  virtual void visit(PatternWithoutRange &node);
  virtual void visit(LiteralPattern &node);
  virtual void visit(IdentifierPattern &node);
  virtual void visit(WildcardPattern &node);
  virtual void visit(RestPattern &node);
  virtual void visit(ReferencePatter &node);
  virtual void visit(StructPattern &node);
  virtual void visit(StructPatternElements &node);
  virtual void visit(StructPatternEtCetera &node);
  virtual void visit(StructPatternFields &node);
  virtual void visit(StructPatternField &node);
  virtual void visit(TuplePattern &node);
  virtual void visit(TuplePatternItems &node);
  virtual void visit(GroupedPattern &node);
  virtual void visit(SlicePattern &node);
  virtual void visit(SlicePatternItems &node);
  virtual void visit(PathPattern &node);
};

}

#endif // INSOMNIA_AST_VISITOR_H